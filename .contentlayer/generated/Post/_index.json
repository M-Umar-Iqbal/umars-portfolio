[
  {
    "title": "Unveiling the Architecture Behind My Blog",
    "date": "2024-03-23T00:00:00.000Z",
    "image": "/images/posts/blog.png",
    "summary": "In the vast universe of web development, embarking on the journey of creating your own blog can be both exhilarating and daunting. As I ventured into this endeavor",
    "body": {
      "raw": "\n## Introduction\n\nIn the vast universe of web development, embarking on the journey of creating your own blog can be both exhilarating and daunting. As I ventured into this endeavor, I found myself faced with choices: Which technologies should I leverage? How can I ensure a seamless user experience while maintaining flexibility and scalability?\n\nIn this blog post, I'll walk you through the tech stack I meticulously selected for my blog. From the robust framework of Next.js to the intuitive styling of Tailwind CSS, each tool plays a vital role in shaping my digital sanctuary.\n\n## The Tech Stack\n\n### Next.js: Powering Performance and Flexibility\n\nAt the heart of my blog lies Next.js, a React framework renowned for its versatility and performance. Leveraging server-side rendering and static site generation capabilities, Next.js ensures lightning-fast page loads and optimal SEO performance. With its intuitive routing system and built-in support for TypeScript, Next.js empowers me to create dynamic, interactive web experiences with ease.\n\n### Tailwind CSS: Streamlining Styling with Utility-First Approach\n\nIn the realm of styling, Tailwind CSS reigns supreme with its utility-first approach. By abstracting common design patterns into reusable utility classes, Tailwind CSS accelerates development workflows while promoting consistency and maintainability. From responsive layouts to custom component styling, Tailwind CSS offers unparalleled flexibility, allowing me to bring my design visions to life effortlessly.\n\n### Additional Dependencies\n\n- **@radix-ui/react-icons**: Providing a vast collection of accessible icons to enhance user interactions.\n- **@theme-toggles/react**: Enabling seamless theme switching functionality for enhanced user experience.\n- **clsx**: Simplifying class names management for conditional styling within React components.\n- **contentlayer**: Facilitating content management and structuring through Markdown-based files.\n- **date-fns**: Offering a comprehensive suite of date manipulation utilities for dynamic content rendering.\n- **hamburger-react**: Enhancing navigation UX with customizable hamburger menu components.\n- **next-contentlayer**: Integrating Markdown-based content with Next.js for streamlined content management.\n- **next-themes**: Enabling effortless theme management and customization within Next.js applications.\n- **react** and **react-dom**: Foundational libraries for building interactive user interfaces within the React ecosystem.\n- **tailwind-merge**: Enhancing Tailwind CSS with additional utility classes for advanced styling needs.\n\n### Development Dependencies\n\n- **@tailwindcss/typography**: Augmenting Tailwind CSS with typographic styles for enhanced readability.\n- **@types/node**, **@types/react**, **@types/react-dom**: Providing TypeScript type definitions for seamless integration within the development environment.\n- **autoprefixer**: Automatically adding vendor prefixes to CSS properties for improved cross-browser compatibility.\n- **eslint** and **eslint-config-next**: Enforcing code quality and adherence to best practices within Next.js projects.\n- **postcss**: Transforming CSS with JavaScript plugins for enhanced functionality and compatibility.\n- **tailwindcss**: Core library for implementing Tailwind CSS utility classes within the project.\n- **typescript**: Enabling static type checking and enhanced developer tooling for JavaScript projects.\n\n## Conclusion\n\nIn the ever-evolving landscape of web development, selecting the right tech stack is paramount to the success of any project. With Next.js providing unparalleled performance and flexibility, and Tailwind CSS streamlining styling workflows, my blog is poised to deliver an immersive and engaging user experience.\n\nAs I continue to refine and expand upon my blog, I'm excited to explore the endless possibilities offered by these technologies. Stay tuned for future updates as I share insights, tips, and lessons learned along the way.\n\nHappy coding, and may your digital endeavors be as fulfilling as mine!\n",
      "html": "<h2>Introduction</h2>\n<p>In the vast universe of web development, embarking on the journey of creating your own blog can be both exhilarating and daunting. As I ventured into this endeavor, I found myself faced with choices: Which technologies should I leverage? How can I ensure a seamless user experience while maintaining flexibility and scalability?</p>\n<p>In this blog post, I'll walk you through the tech stack I meticulously selected for my blog. From the robust framework of Next.js to the intuitive styling of Tailwind CSS, each tool plays a vital role in shaping my digital sanctuary.</p>\n<h2>The Tech Stack</h2>\n<h3>Next.js: Powering Performance and Flexibility</h3>\n<p>At the heart of my blog lies Next.js, a React framework renowned for its versatility and performance. Leveraging server-side rendering and static site generation capabilities, Next.js ensures lightning-fast page loads and optimal SEO performance. With its intuitive routing system and built-in support for TypeScript, Next.js empowers me to create dynamic, interactive web experiences with ease.</p>\n<h3>Tailwind CSS: Streamlining Styling with Utility-First Approach</h3>\n<p>In the realm of styling, Tailwind CSS reigns supreme with its utility-first approach. By abstracting common design patterns into reusable utility classes, Tailwind CSS accelerates development workflows while promoting consistency and maintainability. From responsive layouts to custom component styling, Tailwind CSS offers unparalleled flexibility, allowing me to bring my design visions to life effortlessly.</p>\n<h3>Additional Dependencies</h3>\n<ul>\n<li><strong>@radix-ui/react-icons</strong>: Providing a vast collection of accessible icons to enhance user interactions.</li>\n<li><strong>@theme-toggles/react</strong>: Enabling seamless theme switching functionality for enhanced user experience.</li>\n<li><strong>clsx</strong>: Simplifying class names management for conditional styling within React components.</li>\n<li><strong>contentlayer</strong>: Facilitating content management and structuring through Markdown-based files.</li>\n<li><strong>date-fns</strong>: Offering a comprehensive suite of date manipulation utilities for dynamic content rendering.</li>\n<li><strong>hamburger-react</strong>: Enhancing navigation UX with customizable hamburger menu components.</li>\n<li><strong>next-contentlayer</strong>: Integrating Markdown-based content with Next.js for streamlined content management.</li>\n<li><strong>next-themes</strong>: Enabling effortless theme management and customization within Next.js applications.</li>\n<li><strong>react</strong> and <strong>react-dom</strong>: Foundational libraries for building interactive user interfaces within the React ecosystem.</li>\n<li><strong>tailwind-merge</strong>: Enhancing Tailwind CSS with additional utility classes for advanced styling needs.</li>\n</ul>\n<h3>Development Dependencies</h3>\n<ul>\n<li><strong>@tailwindcss/typography</strong>: Augmenting Tailwind CSS with typographic styles for enhanced readability.</li>\n<li><strong>@types/node</strong>, <strong>@types/react</strong>, <strong>@types/react-dom</strong>: Providing TypeScript type definitions for seamless integration within the development environment.</li>\n<li><strong>autoprefixer</strong>: Automatically adding vendor prefixes to CSS properties for improved cross-browser compatibility.</li>\n<li><strong>eslint</strong> and <strong>eslint-config-next</strong>: Enforcing code quality and adherence to best practices within Next.js projects.</li>\n<li><strong>postcss</strong>: Transforming CSS with JavaScript plugins for enhanced functionality and compatibility.</li>\n<li><strong>tailwindcss</strong>: Core library for implementing Tailwind CSS utility classes within the project.</li>\n<li><strong>typescript</strong>: Enabling static type checking and enhanced developer tooling for JavaScript projects.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>In the ever-evolving landscape of web development, selecting the right tech stack is paramount to the success of any project. With Next.js providing unparalleled performance and flexibility, and Tailwind CSS streamlining styling workflows, my blog is poised to deliver an immersive and engaging user experience.</p>\n<p>As I continue to refine and expand upon my blog, I'm excited to explore the endless possibilities offered by these technologies. Stay tuned for future updates as I share insights, tips, and lessons learned along the way.</p>\n<p>Happy coding, and may your digital endeavors be as fulfilling as mine!</p>"
    },
    "_id": "blog.md",
    "_raw": {
      "sourceFilePath": "blog.md",
      "sourceFileName": "blog.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "blog"
    },
    "type": "Post",
    "url": "/articles/blog"
  },
  {
    "title": "The Art of Cardistry Elevating Playing Cards to a Visual Symphony",
    "date": "2024-03-20T00:00:00.000Z",
    "image": "/images/posts/cardistry.jpeg",
    "summary": "In the world of magic and entertainment, cardistry stands as a mesmerizing art form that transcends the traditional use of playing cards. ",
    "body": {
      "raw": "\n## Introduction\n\nIn the world of magic and entertainment, cardistry stands as a mesmerizing art form that transcends the traditional use of playing cards. It's not just about shuffling or performing tricks; it's a graceful choreography of intricate movements, skillfully executed to create captivating visual displays. In this blog post, we'll delve into the captivating realm of cardistry, exploring its origins, techniques, and the vibrant community that surrounds it.\n\n## Origins and Evolution\n\nCardistry traces its roots back to the early 20th century, emerging alongside the flourishing art of magic. Magicians and sleight-of-hand artists began experimenting with card flourishes and displays as a means of enhancing their performances. Over time, these flourishes evolved into a distinct art form, characterized by its emphasis on aesthetics and visual appeal.\n\nIn the 1990s, pioneers like Brian Tudor and De'vo Vom Schattenreich pushed the boundaries of cardistry, introducing innovative moves and techniques that captivated audiences worldwide. With the advent of the internet and social media, cardistry experienced a renaissance, as enthusiasts from around the globe connected and shared their passion for this mesmerizing art form.\n\n## Techniques and Moves\n\nAt the core of cardistry lies a repertoire of techniques and moves, each requiring precision, dexterity, and hours of practice to master. From the elegant cascade of a riffle shuffle to the intricate fan of a deck spread, cardists employ a diverse array of moves to create stunning visual effects. Some of the most iconic techniques include:\n\n- **Charlier Cut**: A fundamental one-handed cut where a packet of cards is rotated using the thumb.\n- **Sybil Cut**: A complex series of cuts and displays that create a mesmerizing cascade effect.\n- **Spring**: A dynamic move where cards are released from one hand and cascade down in a fluid motion.\n- **Card Fan**: A display where cards are fanned out in a semicircle, showcasing the vibrant colors and patterns of the deck.\n\n## Community and Culture\n\nBeyond the technical aspects, cardistry is a vibrant and inclusive community that celebrates creativity, collaboration, and self-expression. Online forums, social media platforms, and dedicated gatherings provide avenues for cardists to connect, share ideas, and inspire one another. Whether it's attending a cardistry convention, participating in online challenges, or simply sharing a new move on Instagram, enthusiasts find camaraderie and support within the global cardistry community.\n\n## Conclusion\n\nIn a world filled with digital distractions, cardistry offers a refreshing escape into the realm of analog artistry. Through its elegant movements and mesmerizing displays, it reminds us of the beauty and wonder that can be found in the simplest of objects. As you embark on your own journey into the world of cardistry, remember that patience, practice, and passion are the keys to unlocking its true potential. So pick up a deck, let your creativity flow, and prepare to be amazed by the endless possibilities that lie within the humble playing card.\n\nHappy flourishing!\n",
      "html": "<h2>Introduction</h2>\n<p>In the world of magic and entertainment, cardistry stands as a mesmerizing art form that transcends the traditional use of playing cards. It's not just about shuffling or performing tricks; it's a graceful choreography of intricate movements, skillfully executed to create captivating visual displays. In this blog post, we'll delve into the captivating realm of cardistry, exploring its origins, techniques, and the vibrant community that surrounds it.</p>\n<h2>Origins and Evolution</h2>\n<p>Cardistry traces its roots back to the early 20th century, emerging alongside the flourishing art of magic. Magicians and sleight-of-hand artists began experimenting with card flourishes and displays as a means of enhancing their performances. Over time, these flourishes evolved into a distinct art form, characterized by its emphasis on aesthetics and visual appeal.</p>\n<p>In the 1990s, pioneers like Brian Tudor and De'vo Vom Schattenreich pushed the boundaries of cardistry, introducing innovative moves and techniques that captivated audiences worldwide. With the advent of the internet and social media, cardistry experienced a renaissance, as enthusiasts from around the globe connected and shared their passion for this mesmerizing art form.</p>\n<h2>Techniques and Moves</h2>\n<p>At the core of cardistry lies a repertoire of techniques and moves, each requiring precision, dexterity, and hours of practice to master. From the elegant cascade of a riffle shuffle to the intricate fan of a deck spread, cardists employ a diverse array of moves to create stunning visual effects. Some of the most iconic techniques include:</p>\n<ul>\n<li><strong>Charlier Cut</strong>: A fundamental one-handed cut where a packet of cards is rotated using the thumb.</li>\n<li><strong>Sybil Cut</strong>: A complex series of cuts and displays that create a mesmerizing cascade effect.</li>\n<li><strong>Spring</strong>: A dynamic move where cards are released from one hand and cascade down in a fluid motion.</li>\n<li><strong>Card Fan</strong>: A display where cards are fanned out in a semicircle, showcasing the vibrant colors and patterns of the deck.</li>\n</ul>\n<h2>Community and Culture</h2>\n<p>Beyond the technical aspects, cardistry is a vibrant and inclusive community that celebrates creativity, collaboration, and self-expression. Online forums, social media platforms, and dedicated gatherings provide avenues for cardists to connect, share ideas, and inspire one another. Whether it's attending a cardistry convention, participating in online challenges, or simply sharing a new move on Instagram, enthusiasts find camaraderie and support within the global cardistry community.</p>\n<h2>Conclusion</h2>\n<p>In a world filled with digital distractions, cardistry offers a refreshing escape into the realm of analog artistry. Through its elegant movements and mesmerizing displays, it reminds us of the beauty and wonder that can be found in the simplest of objects. As you embark on your own journey into the world of cardistry, remember that patience, practice, and passion are the keys to unlocking its true potential. So pick up a deck, let your creativity flow, and prepare to be amazed by the endless possibilities that lie within the humble playing card.</p>\n<p>Happy flourishing!</p>"
    },
    "_id": "cardistry.md",
    "_raw": {
      "sourceFilePath": "cardistry.md",
      "sourceFileName": "cardistry.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "cardistry"
    },
    "type": "Post",
    "url": "/articles/cardistry"
  },
  {
    "title": "Dai Vernon",
    "date": "2024-03-20T00:00:00.000Z",
    "image": "/images/posts/daivernon.jpeg",
    "summary": "Magic, as an art form, has its luminaries, those whose names resonate through the ages, leaving an indelible mark on the world of illusion",
    "body": {
      "raw": "\nMagic, as an art form, has its luminaries, those whose names resonate through the ages, leaving an indelible mark on the world of illusion. Among these titans stands Dai Vernon, a master conjurer whose innovations and contributions have shaped modern magic in profound ways.\n\nBorn in Ottawa, Canada, in 1894, Dai Vernon, also known as \"The Professor,\" embarked on a lifelong journey dedicated to the pursuit of magic. His fascination with sleight of hand and illusion led him to study under some of the greatest magicians of his time, honing his skills and refining his craft to perfection.\n\nVernon's impact on the world of magic is immeasurable, with his influence felt across generations of magicians. His relentless pursuit of perfection and his unwavering dedication to his art set him apart as a true visionary in the realm of illusion.\n\n**The Magic of Dai Vernon**\n\nOne of Vernon's most celebrated contributions to magic is his mastery of sleight of hand. His hands were renowned for their dexterity and precision, capable of executing seemingly impossible maneuvers with effortless grace. From the legendary \"Ambitious Card\" routine to the elusive \"Triumph\" effect, Vernon's sleight of hand prowess knew no bounds.\n\nBut Vernon's genius extended far beyond mere technical skill. He was a masterful storyteller, weaving narratives of mystery and wonder that captivated audiences around the world. His performances were not just displays of skill, but journeys into realms of enchantment and intrigue.\n\n**The Vernon Touch**\n\nWhat truly set Dai Vernon apart was his relentless pursuit of perfection. He was a perfectionist in every sense of the word, constantly refining and perfecting his techniques to achieve the impossible. His quest for mastery knew no bounds, inspiring generations of magicians to push the boundaries of their own creativity and skill.\n\nVernon's impact on magic is perhaps best encapsulated by his famous quote: \"In magic, today as always, the effect is what counts. The method should be subservient to the effect.\" For Vernon, magic was not just about fooling the eye; it was about creating moments of wonder and astonishment that lingered in the minds of audiences long after the performance had ended.\n\n**A Legacy of Inspiration**\n\nThough Dai Vernon may have passed from this world, his legacy lives on in the hearts and minds of magicians everywhere. His contributions to the art of magic continue to inspire and influence countless performers, reminding us that true magic lies not in the hands, but in the imagination and spirit of those who dare to dream.\n\nIn the pantheon of magical greats, Dai Vernon stands as a beacon of innovation and inspiration, a testament to the enduring power of the human spirit to create wonder and enchantment in the world. As we continue to marvel at the mysteries of magic, let us never forget the indelible mark left by \"The Professor\" himself.\n",
      "html": "<p>Magic, as an art form, has its luminaries, those whose names resonate through the ages, leaving an indelible mark on the world of illusion. Among these titans stands Dai Vernon, a master conjurer whose innovations and contributions have shaped modern magic in profound ways.</p>\n<p>Born in Ottawa, Canada, in 1894, Dai Vernon, also known as \"The Professor,\" embarked on a lifelong journey dedicated to the pursuit of magic. His fascination with sleight of hand and illusion led him to study under some of the greatest magicians of his time, honing his skills and refining his craft to perfection.</p>\n<p>Vernon's impact on the world of magic is immeasurable, with his influence felt across generations of magicians. His relentless pursuit of perfection and his unwavering dedication to his art set him apart as a true visionary in the realm of illusion.</p>\n<p><strong>The Magic of Dai Vernon</strong></p>\n<p>One of Vernon's most celebrated contributions to magic is his mastery of sleight of hand. His hands were renowned for their dexterity and precision, capable of executing seemingly impossible maneuvers with effortless grace. From the legendary \"Ambitious Card\" routine to the elusive \"Triumph\" effect, Vernon's sleight of hand prowess knew no bounds.</p>\n<p>But Vernon's genius extended far beyond mere technical skill. He was a masterful storyteller, weaving narratives of mystery and wonder that captivated audiences around the world. His performances were not just displays of skill, but journeys into realms of enchantment and intrigue.</p>\n<p><strong>The Vernon Touch</strong></p>\n<p>What truly set Dai Vernon apart was his relentless pursuit of perfection. He was a perfectionist in every sense of the word, constantly refining and perfecting his techniques to achieve the impossible. His quest for mastery knew no bounds, inspiring generations of magicians to push the boundaries of their own creativity and skill.</p>\n<p>Vernon's impact on magic is perhaps best encapsulated by his famous quote: \"In magic, today as always, the effect is what counts. The method should be subservient to the effect.\" For Vernon, magic was not just about fooling the eye; it was about creating moments of wonder and astonishment that lingered in the minds of audiences long after the performance had ended.</p>\n<p><strong>A Legacy of Inspiration</strong></p>\n<p>Though Dai Vernon may have passed from this world, his legacy lives on in the hearts and minds of magicians everywhere. His contributions to the art of magic continue to inspire and influence countless performers, reminding us that true magic lies not in the hands, but in the imagination and spirit of those who dare to dream.</p>\n<p>In the pantheon of magical greats, Dai Vernon stands as a beacon of innovation and inspiration, a testament to the enduring power of the human spirit to create wonder and enchantment in the world. As we continue to marvel at the mysteries of magic, let us never forget the indelible mark left by \"The Professor\" himself.</p>"
    },
    "_id": "daivernon.md",
    "_raw": {
      "sourceFilePath": "daivernon.md",
      "sourceFileName": "daivernon.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "daivernon"
    },
    "type": "Post",
    "url": "/articles/daivernon"
  },
  {
    "title": "How to generate dynamic OG image with NextJs",
    "date": "2024-05-13T00:00:00.000Z",
    "image": "/images/posts/og.png",
    "summary": "An Open Graph image or OG image is the image that is displayed on social media accounts when you or someone else post a link to an article or a video from your website",
    "body": {
      "raw": "\n## Introduction\n\nAn Open Graph image or OG image is the image that is displayed on social media accounts when you or someone else post a link to an article or a video from your website.\n\n## Steps\n\n#### Step 1: Add image inside public folder that has empty space `og-bg.jpg`\n\n![background-image](https://gitcoder.vercel.app/og)\n\n#### Step 2: Create new folder inside app directory and name it OG then create `route.tsx` (jsx) file\n\n```tsx\nimport { ImageResponse } from 'next/og';\nimport { NextRequest } from 'next/server';\n\nexport const runtime = 'edge';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = req.nextUrl;\n  const postTitle = searchParams.get('title');\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'column',  \n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          backgroundImage: 'url(http://localhost:3000/og-bg.jpg)',\n        }}\n      >\n        <div\n          style={{\n            marginLeft: 190,\n            marginRight: 190,\n            display: 'flex',\n            fontSize: 130,\n            letterSpacing: '-0.05em',\n            fontStyle: 'normal',\n            color: 'white',\n            lineHeight: '120px',\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {postTitle}\n        </div>\n      </div>\n    ),\n    {\n      width: 1920,\n      height: 1080,\n    }\n  );\n}\n```\n\n### The Result `http://localhost:3000/og?title=HelloWorld`\n\n![background-image](https://gitcoder.vercel.app/og?title=HelloWorld)\n\n#### Then you can use it in generateMetaData function\n\n```tsx\nexport const generateMetadata = ({ params }: ArticleProps) => {\n  const post = allPosts.find((post) => post._raw.flattenedPath === params.slug);\n  if (!post) notFound();\n\n  let { title, date: publishedTime, summary: description } = post;\n  let ogImage = `/og?title=${title}`;\n\n  return {\n    title,\n    description,\n    alternates: {\n      canonical: `/articles/${post._raw.flattenedPath}`,\n    },\n    openGraph: {\n      title,\n      description,\n      type: \"article\",\n      publishedTime,\n      url: `/articles/${post._raw.flattenedPath}`,\n      images: [\n        {\n          url: ogImage,\n          alt: post.title,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [ogImage],\n    },\n  };\n};\n```\n\nHappy coding, Check my [GitHub repo](https://github.com/yassinehaimouch/gitcoder.vercel.app)\n",
      "html": "<h2>Introduction</h2>\n<p>An Open Graph image or OG image is the image that is displayed on social media accounts when you or someone else post a link to an article or a video from your website.</p>\n<h2>Steps</h2>\n<h4>Step 1: Add image inside public folder that has empty space <code>og-bg.jpg</code></h4>\n<p><img src=\"https://gitcoder.vercel.app/og\" alt=\"background-image\"></p>\n<h4>Step 2: Create new folder inside app directory and name it OG then create <code>route.tsx</code> (jsx) file</h4>\n<pre><code class=\"language-tsx\">import { ImageResponse } from 'next/og';\nimport { NextRequest } from 'next/server';\n\nexport const runtime = 'edge';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = req.nextUrl;\n  const postTitle = searchParams.get('title');\n\n  return new ImageResponse(\n    (\n      &#x3C;div\n        style={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'column',  \n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          backgroundImage: 'url(http://localhost:3000/og-bg.jpg)',\n        }}\n      >\n        &#x3C;div\n          style={{\n            marginLeft: 190,\n            marginRight: 190,\n            display: 'flex',\n            fontSize: 130,\n            letterSpacing: '-0.05em',\n            fontStyle: 'normal',\n            color: 'white',\n            lineHeight: '120px',\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {postTitle}\n        &#x3C;/div>\n      &#x3C;/div>\n    ),\n    {\n      width: 1920,\n      height: 1080,\n    }\n  );\n}\n</code></pre>\n<h3>The Result <code>http://localhost:3000/og?title=HelloWorld</code></h3>\n<p><img src=\"https://gitcoder.vercel.app/og?title=HelloWorld\" alt=\"background-image\"></p>\n<h4>Then you can use it in generateMetaData function</h4>\n<pre><code class=\"language-tsx\">export const generateMetadata = ({ params }: ArticleProps) => {\n  const post = allPosts.find((post) => post._raw.flattenedPath === params.slug);\n  if (!post) notFound();\n\n  let { title, date: publishedTime, summary: description } = post;\n  let ogImage = `/og?title=${title}`;\n\n  return {\n    title,\n    description,\n    alternates: {\n      canonical: `/articles/${post._raw.flattenedPath}`,\n    },\n    openGraph: {\n      title,\n      description,\n      type: \"article\",\n      publishedTime,\n      url: `/articles/${post._raw.flattenedPath}`,\n      images: [\n        {\n          url: ogImage,\n          alt: post.title,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [ogImage],\n    },\n  };\n};\n</code></pre>\n<p>Happy coding, Check my <a href=\"https://github.com/yassinehaimouch/gitcoder.vercel.app\">GitHub repo</a></p>"
    },
    "_id": "og.md",
    "_raw": {
      "sourceFilePath": "og.md",
      "sourceFileName": "og.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "og"
    },
    "type": "Post",
    "url": "/articles/og"
  },
  {
    "title": "The Best React UI Libraries for Your Projects",
    "date": "2024-04-03T00:00:00.000Z",
    "summary": "React developers have a wide array of UI libraries to choose from, each offering unique features and benefits. This article explores five top React UI libraries",
    "body": {
      "raw": "\nHey there, fellow developers! Are you diving into the world of React and seeking the perfect UI library to streamline your projects? Well, you're in luck! React has a vibrant ecosystem of UI libraries that can make your development journey smoother and more efficient. Let's take a closer look at some of the best React UI libraries out there.\n\n### 1. **Shadcn**\n[Shadcn](https://ui.shadcn.com/) is Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.\n\n### 2. **Material-UI**\n[Material-UI](https://material-ui.com/) is a popular choice among React developers, and for good reason. It provides a set of beautiful and customizable components based on Google's Material Design guidelines. With Material-UI, you can easily create sleek and modern user interfaces without having to start from scratch. Plus, it offers robust documentation and an active community for support.\n\n### 3. **Ant Design**\n[Ant Design](https://ant.design/) is another fantastic React UI library known for its comprehensive set of components and design principles. Developed by Alibaba, Ant Design follows a cohesive design language and offers a plethora of ready-to-use components for building professional-grade applications. It's highly customizable and comes with a range of themes to suit different project needs.\n\n### 4. **Chakra UI**\nIf you're a fan of simplicity and accessibility, [Chakra UI](https://chakra-ui.com/) might be the perfect fit for your React projects. This library focuses on providing accessible and reusable components that adhere to the principles of atomic design. With Chakra UI, you can quickly build responsive and accessible interfaces while maintaining consistency and scalability.\n\n### 5. **Semantic UI React**\n[Semantic UI React](https://react.semantic-ui.com/) brings the power of Semantic UI to the React ecosystem, offering a wide range of UI components with intuitive APIs. It promotes clean and readable code by emphasizing the use of human-friendly HTML and CSS class names. Whether you're building a simple website or a complex web application, Semantic UI React can help you achieve your design goals with ease.\n\n### 6. **Tailwind CSS**\nWhile not strictly a React UI library, [Tailwind CSS](https://tailwindcss.com/) deserves a mention for its popularity and versatility. Tailwind CSS provides a utility-first approach to styling, allowing you to quickly create custom designs without writing a lot of CSS code. When combined with React, Tailwind CSS can empower you to build responsive and visually appealing user interfaces with minimal effort.\n\n### Conclusion\nChoosing the right React UI library can significantly impact your development workflow and the quality of your applications. Whether you prefer the sleekness of Material-UI, the comprehensive nature of Ant Design, the simplicity of Chakra UI, the readability of Semantic UI React, or the versatility of Tailwind CSS, there's a library out there to suit your needs. So go ahead, explore these options, and elevate your React projects to new heights! Happy coding! 🚀\n",
      "html": "<p>Hey there, fellow developers! Are you diving into the world of React and seeking the perfect UI library to streamline your projects? Well, you're in luck! React has a vibrant ecosystem of UI libraries that can make your development journey smoother and more efficient. Let's take a closer look at some of the best React UI libraries out there.</p>\n<h3>1. <strong>Shadcn</strong></h3>\n<p><a href=\"https://ui.shadcn.com/\">Shadcn</a> is Beautifully designed components that you can copy and paste into your apps. Accessible. Customizable. Open Source.</p>\n<h3>2. <strong>Material-UI</strong></h3>\n<p><a href=\"https://material-ui.com/\">Material-UI</a> is a popular choice among React developers, and for good reason. It provides a set of beautiful and customizable components based on Google's Material Design guidelines. With Material-UI, you can easily create sleek and modern user interfaces without having to start from scratch. Plus, it offers robust documentation and an active community for support.</p>\n<h3>3. <strong>Ant Design</strong></h3>\n<p><a href=\"https://ant.design/\">Ant Design</a> is another fantastic React UI library known for its comprehensive set of components and design principles. Developed by Alibaba, Ant Design follows a cohesive design language and offers a plethora of ready-to-use components for building professional-grade applications. It's highly customizable and comes with a range of themes to suit different project needs.</p>\n<h3>4. <strong>Chakra UI</strong></h3>\n<p>If you're a fan of simplicity and accessibility, <a href=\"https://chakra-ui.com/\">Chakra UI</a> might be the perfect fit for your React projects. This library focuses on providing accessible and reusable components that adhere to the principles of atomic design. With Chakra UI, you can quickly build responsive and accessible interfaces while maintaining consistency and scalability.</p>\n<h3>5. <strong>Semantic UI React</strong></h3>\n<p><a href=\"https://react.semantic-ui.com/\">Semantic UI React</a> brings the power of Semantic UI to the React ecosystem, offering a wide range of UI components with intuitive APIs. It promotes clean and readable code by emphasizing the use of human-friendly HTML and CSS class names. Whether you're building a simple website or a complex web application, Semantic UI React can help you achieve your design goals with ease.</p>\n<h3>6. <strong>Tailwind CSS</strong></h3>\n<p>While not strictly a React UI library, <a href=\"https://tailwindcss.com/\">Tailwind CSS</a> deserves a mention for its popularity and versatility. Tailwind CSS provides a utility-first approach to styling, allowing you to quickly create custom designs without writing a lot of CSS code. When combined with React, Tailwind CSS can empower you to build responsive and visually appealing user interfaces with minimal effort.</p>\n<h3>Conclusion</h3>\n<p>Choosing the right React UI library can significantly impact your development workflow and the quality of your applications. Whether you prefer the sleekness of Material-UI, the comprehensive nature of Ant Design, the simplicity of Chakra UI, the readability of Semantic UI React, or the versatility of Tailwind CSS, there's a library out there to suit your needs. So go ahead, explore these options, and elevate your React projects to new heights! Happy coding! 🚀</p>"
    },
    "_id": "reactui-lib.md",
    "_raw": {
      "sourceFilePath": "reactui-lib.md",
      "sourceFileName": "reactui-lib.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "reactui-lib"
    },
    "type": "Post",
    "url": "/articles/reactui-lib"
  },
  {
    "title": "TailwindCSS Tips I Wish I Learned Earlier",
    "date": "2024-03-24T00:00:00.000Z",
    "image": "https://tailwindcss.com/_next/static/media/tailwindcss-mark.3c5441fc7a190fb1800d4a5c7f07ba4b1345a9c8.svg",
    "summary": "Learn how to enhance user interaction by adding focus rings to interactive elements like buttons in Tailwind CSS. Improve accessibility and user experience with simple yet effective styling techniques.",
    "body": {
      "raw": "\n### Consistent Sizing\n\nWhen creating square elements or elements with equal height and width, opting for the `size` class instead of separate `height` and `width` classes can enhance readability and maintainability:\n\n```jsx\n{/* Using height and width classes */}\n<div className=\"h-12 w-12 bg-red-300\"></div>\n\n{/* Using size class (recommended) */}\n<div className=\"size-12 bg-green-300\"></div>\n```\n\n### Using Rings in Tailwind CSS\n\nIn Tailwind CSS, rings are a powerful feature for enhancing the focus state of interactive elements like buttons. Let's explore how to use rings with a simple example:\n\n```jsx\n<button className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:ring-2 focus:ring-blue-500\">Save Changes</button>\n```\nIn this example, we have a button styled with Tailwind CSS classes. Here's what each class does:\n\n- `bg-blue-500`: Sets the background color of the button to blue.\n- `hover:bg-blue-600`: Changes the background color to a darker shade of blue when hovered over.\n- `text-white`: Sets the text color to white.\n- `font-bold`: Makes the text bold.\n- `py-2 px-4`: Adds padding to the top and bottom (py) and left and right (px) of the button.\n- `rounded`: Rounds the corners of the button.\n\nNow, let's focus on the `focus:ring-2` and `focus:ring-blue-500` classes.\n\nThese classes are responsible for adding a ring around the button when it gains focus.\nThe focus:ring-2 class specifies the width of the ring (2 pixels in this case), and focus:ring-blue-500 sets the color of the ring to blue to match the button's color.\n\nBy adding these ring classes, users can easily identify which element has focus, providing better accessibility and user experience.\n\nTailwind CSS makes it simple to enhance the interactivity and usability of your web applications with features like rings. Experiment with different colors and sizes to find the perfect style for your buttons and other interactive elements.\n\n### Group\n\nIn Tailwind CSS, the `group` and `group-hover` utilities are used to apply styles to elements based on their parent's hover state. This is particularly useful for creating interactive components where you want certain elements within a container to change appearance when the container is hovered over.\n\nLet's start with a simple example of a button with a hover effect using `group`:\n\n```jsx\n<button class=\"group bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\n  Save Changes\n  <span class=\"group-hover:underline ml-1\">(Hover me!)</span>\n</button>\n```\n\nIn this example:\n\n- The `group` class is applied to the button element.\n- Inside the button, there's a span element with the class `group-hover:underline`. This means that the text within this span will be underlined when the parent button is hovered over.\n\n\n### Plugins\n\nExtending Tailwind with reusable third-party plugins.\nPlugins let you register new styles for Tailwind to inject into the user’s stylesheet using JavaScript instead of CSS.\n\n#### Here some Tailwind CSS plugins for developers\n\n- [daisyui](https://daisyui.com/)\n- [tailwindcss/typography](https://tailwindcss.com/docs/typography-plugin)\n- [tailwindcss/container-queries](https://tailwindcss.com/docs/plugins#container-queries)\n- [tailwindcss-flip](https://github.com/cvrajeesh/tailwindcss-flip)\n- [tailwindcss-animate](https://github.com/jamiebuilds/tailwindcss-animate)\n- [tailwind-scrollbar-hide](https://github.com/reslear/tailwind-scrollbar-hide)\n- [tailwindcss/forms](https://github.com/tailwindlabs/tailwindcss-forms)\n- [tailwindcss-opentype](https://tailwindcss-opentype.netlify.app/)\n- [tailwindcss-3d](https://github.com/sambauers/tailwindcss-3d)",
      "html": "<h3>Consistent Sizing</h3>\n<p>When creating square elements or elements with equal height and width, opting for the <code>size</code> class instead of separate <code>height</code> and <code>width</code> classes can enhance readability and maintainability:</p>\n<pre><code class=\"language-jsx\">{/* Using height and width classes */}\n&#x3C;div className=\"h-12 w-12 bg-red-300\">&#x3C;/div>\n\n{/* Using size class (recommended) */}\n&#x3C;div className=\"size-12 bg-green-300\">&#x3C;/div>\n</code></pre>\n<h3>Using Rings in Tailwind CSS</h3>\n<p>In Tailwind CSS, rings are a powerful feature for enhancing the focus state of interactive elements like buttons. Let's explore how to use rings with a simple example:</p>\n<pre><code class=\"language-jsx\">&#x3C;button className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:ring-2 focus:ring-blue-500\">Save Changes&#x3C;/button>\n</code></pre>\n<p>In this example, we have a button styled with Tailwind CSS classes. Here's what each class does:</p>\n<ul>\n<li><code>bg-blue-500</code>: Sets the background color of the button to blue.</li>\n<li><code>hover:bg-blue-600</code>: Changes the background color to a darker shade of blue when hovered over.</li>\n<li><code>text-white</code>: Sets the text color to white.</li>\n<li><code>font-bold</code>: Makes the text bold.</li>\n<li><code>py-2 px-4</code>: Adds padding to the top and bottom (py) and left and right (px) of the button.</li>\n<li><code>rounded</code>: Rounds the corners of the button.</li>\n</ul>\n<p>Now, let's focus on the <code>focus:ring-2</code> and <code>focus:ring-blue-500</code> classes.</p>\n<p>These classes are responsible for adding a ring around the button when it gains focus.\nThe focus:ring-2 class specifies the width of the ring (2 pixels in this case), and focus:ring-blue-500 sets the color of the ring to blue to match the button's color.</p>\n<p>By adding these ring classes, users can easily identify which element has focus, providing better accessibility and user experience.</p>\n<p>Tailwind CSS makes it simple to enhance the interactivity and usability of your web applications with features like rings. Experiment with different colors and sizes to find the perfect style for your buttons and other interactive elements.</p>\n<h3>Group</h3>\n<p>In Tailwind CSS, the <code>group</code> and <code>group-hover</code> utilities are used to apply styles to elements based on their parent's hover state. This is particularly useful for creating interactive components where you want certain elements within a container to change appearance when the container is hovered over.</p>\n<p>Let's start with a simple example of a button with a hover effect using <code>group</code>:</p>\n<pre><code class=\"language-jsx\">&#x3C;button class=\"group bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\n  Save Changes\n  &#x3C;span class=\"group-hover:underline ml-1\">(Hover me!)&#x3C;/span>\n&#x3C;/button>\n</code></pre>\n<p>In this example:</p>\n<ul>\n<li>The <code>group</code> class is applied to the button element.</li>\n<li>Inside the button, there's a span element with the class <code>group-hover:underline</code>. This means that the text within this span will be underlined when the parent button is hovered over.</li>\n</ul>\n<h3>Plugins</h3>\n<p>Extending Tailwind with reusable third-party plugins.\nPlugins let you register new styles for Tailwind to inject into the user’s stylesheet using JavaScript instead of CSS.</p>\n<h4>Here some Tailwind CSS plugins for developers</h4>\n<ul>\n<li><a href=\"https://daisyui.com/\">daisyui</a></li>\n<li><a href=\"https://tailwindcss.com/docs/typography-plugin\">tailwindcss/typography</a></li>\n<li><a href=\"https://tailwindcss.com/docs/plugins#container-queries\">tailwindcss/container-queries</a></li>\n<li><a href=\"https://github.com/cvrajeesh/tailwindcss-flip\">tailwindcss-flip</a></li>\n<li><a href=\"https://github.com/jamiebuilds/tailwindcss-animate\">tailwindcss-animate</a></li>\n<li><a href=\"https://github.com/reslear/tailwind-scrollbar-hide\">tailwind-scrollbar-hide</a></li>\n<li><a href=\"https://github.com/tailwindlabs/tailwindcss-forms\">tailwindcss/forms</a></li>\n<li><a href=\"https://tailwindcss-opentype.netlify.app/\">tailwindcss-opentype</a></li>\n<li><a href=\"https://github.com/sambauers/tailwindcss-3d\">tailwindcss-3d</a></li>\n</ul>"
    },
    "_id": "tailwind-css.md",
    "_raw": {
      "sourceFilePath": "tailwind-css.md",
      "sourceFileName": "tailwind-css.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "tailwind-css"
    },
    "type": "Post",
    "url": "/articles/tailwind-css"
  }
]