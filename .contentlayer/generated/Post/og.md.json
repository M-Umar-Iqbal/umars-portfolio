{
  "title": "How to generate dynamic OG image with NextJs",
  "date": "2024-05-13T00:00:00.000Z",
  "image": "/images/posts/og.png",
  "summary": "An Open Graph image or OG image is the image that is displayed on social media accounts when you or someone else post a link to an article or a video from your website",
  "body": {
    "raw": "\n## Introduction\n\nAn Open Graph image or OG image is the image that is displayed on social media accounts when you or someone else post a link to an article or a video from your website.\n\n## Steps\n\n#### Step 1: Add image inside public folder that has empty space `og-bg.jpg`\n\n![background-image](https://gitcoder.vercel.app/og)\n\n#### Step 2: Create new folder inside app directory and name it OG then create `route.tsx` (jsx) file\n\n```tsx\nimport { ImageResponse } from 'next/og';\nimport { NextRequest } from 'next/server';\n\nexport const runtime = 'edge';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = req.nextUrl;\n  const postTitle = searchParams.get('title');\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'column',  \n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          backgroundImage: 'url(http://localhost:3000/og-bg.jpg)',\n        }}\n      >\n        <div\n          style={{\n            marginLeft: 190,\n            marginRight: 190,\n            display: 'flex',\n            fontSize: 130,\n            letterSpacing: '-0.05em',\n            fontStyle: 'normal',\n            color: 'white',\n            lineHeight: '120px',\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {postTitle}\n        </div>\n      </div>\n    ),\n    {\n      width: 1920,\n      height: 1080,\n    }\n  );\n}\n```\n\n### The Result `http://localhost:3000/og?title=HelloWorld`\n\n![background-image](https://gitcoder.vercel.app/og?title=HelloWorld)\n\n#### Then you can use it in generateMetaData function\n\n```tsx\nexport const generateMetadata = ({ params }: ArticleProps) => {\n  const post = allPosts.find((post) => post._raw.flattenedPath === params.slug);\n  if (!post) notFound();\n\n  let { title, date: publishedTime, summary: description } = post;\n  let ogImage = `/og?title=${title}`;\n\n  return {\n    title,\n    description,\n    alternates: {\n      canonical: `/articles/${post._raw.flattenedPath}`,\n    },\n    openGraph: {\n      title,\n      description,\n      type: \"article\",\n      publishedTime,\n      url: `/articles/${post._raw.flattenedPath}`,\n      images: [\n        {\n          url: ogImage,\n          alt: post.title,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [ogImage],\n    },\n  };\n};\n```\n\nHappy coding, Check my [GitHub repo](https://github.com/yassinehaimouch/gitcoder.vercel.app)\n",
    "html": "<h2>Introduction</h2>\n<p>An Open Graph image or OG image is the image that is displayed on social media accounts when you or someone else post a link to an article or a video from your website.</p>\n<h2>Steps</h2>\n<h4>Step 1: Add image inside public folder that has empty space <code>og-bg.jpg</code></h4>\n<p><img src=\"https://gitcoder.vercel.app/og\" alt=\"background-image\"></p>\n<h4>Step 2: Create new folder inside app directory and name it OG then create <code>route.tsx</code> (jsx) file</h4>\n<pre><code class=\"language-tsx\">import { ImageResponse } from 'next/og';\nimport { NextRequest } from 'next/server';\n\nexport const runtime = 'edge';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = req.nextUrl;\n  const postTitle = searchParams.get('title');\n\n  return new ImageResponse(\n    (\n      &#x3C;div\n        style={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'column',  \n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          backgroundImage: 'url(http://localhost:3000/og-bg.jpg)',\n        }}\n      >\n        &#x3C;div\n          style={{\n            marginLeft: 190,\n            marginRight: 190,\n            display: 'flex',\n            fontSize: 130,\n            letterSpacing: '-0.05em',\n            fontStyle: 'normal',\n            color: 'white',\n            lineHeight: '120px',\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {postTitle}\n        &#x3C;/div>\n      &#x3C;/div>\n    ),\n    {\n      width: 1920,\n      height: 1080,\n    }\n  );\n}\n</code></pre>\n<h3>The Result <code>http://localhost:3000/og?title=HelloWorld</code></h3>\n<p><img src=\"https://gitcoder.vercel.app/og?title=HelloWorld\" alt=\"background-image\"></p>\n<h4>Then you can use it in generateMetaData function</h4>\n<pre><code class=\"language-tsx\">export const generateMetadata = ({ params }: ArticleProps) => {\n  const post = allPosts.find((post) => post._raw.flattenedPath === params.slug);\n  if (!post) notFound();\n\n  let { title, date: publishedTime, summary: description } = post;\n  let ogImage = `/og?title=${title}`;\n\n  return {\n    title,\n    description,\n    alternates: {\n      canonical: `/articles/${post._raw.flattenedPath}`,\n    },\n    openGraph: {\n      title,\n      description,\n      type: \"article\",\n      publishedTime,\n      url: `/articles/${post._raw.flattenedPath}`,\n      images: [\n        {\n          url: ogImage,\n          alt: post.title,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [ogImage],\n    },\n  };\n};\n</code></pre>\n<p>Happy coding, Check my <a href=\"https://github.com/yassinehaimouch/gitcoder.vercel.app\">GitHub repo</a></p>"
  },
  "_id": "og.md",
  "_raw": {
    "sourceFilePath": "og.md",
    "sourceFileName": "og.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "og"
  },
  "type": "Post",
  "url": "/articles/og"
}